JavaScript framework for building desktop applications
Open Source JavaScript framework
Initially developed by github
Node.js + Chromium

Multiplatform
Presentation = Web (html + css + js)

IE Edge (webkit) + Moz + Chrome (webkit) + Safari (webkit) + Opera (webkit)

Atom Editor
Visual Studio Code
Twitter Desktop client
Microsoft Teams
Github desktop client 
Spotify
Slack

ES5 (ECMAScript 5 / JavaScript )
==========================

    Data Types
        boolean, number, string, 
        object, undefined, function

    Programming Constructs
        var, if else, switch case, for, for in, while, throw, try catch finally, function

    Apis
        Array, Math, Date, Error, RegEx, timer (setTimeout, clearTimeout, setInterval, clearInterval)

    Unique Aspects
        Object = Dictionary / Map / Hash -> Collection of key/value pairs
        Not typed, dynamic
        Method = attributes whose value is a function
        Funtional
            function are first class citizens (data / objects)
                functions can be assigned to variables
                functions can have attributes (in JS only)
                functions can have methods (in JS only)
                functions can be passed as arguments to other functions (Higher Order Functions)
                functions can be returned as return value from other functions ( Higher Order Functions)
        this
            it doesnot matter where the function is (OR) who owns the function
            What matters is 'HOW the function is invoked'

            Function invocation types
                - As a method of an object (obj)
                    this -> obj

                - AS a function
                    this -> global (window in browser)

                - Using the 'new' keyword
                    this -> refers to a new object
                    this -> returned by default

                - using the 'call' method of a function

                - using the 'apply' method of the function

                - As an Immediately Invoked Function Expression (IIFE)

Use Cases:
add(10,20)
add(10,'20')
add(10, 'abc')
add([10,20], [30,40])
add([10,20], [30,'40'])
add([10,20], [30,['40',50]])
add([10,20], [30,'abc'])
add(function(){ return [10,20]; }, function(){ return [30,'abc']; })
add(function(){ return [10,20]; }, function(){ return [30,['40',50]]; })
add([function(){ return [10,20]; }, function(){ return [30,['40',50]]; }])
add(10)
add()
add(10,20,30,40,50)

function add(){
    function parseArg(n){
        if (typeof n === 'function') return parseArg(n());
        if (Array.isArray(n)) return add.apply(this, n);
        return isNaN(n) ? 0 : parseInt(n)
    }
    return arguments.length <= 1 ? parseArg(arguments[0]) : parseArg(arguments[0]) + add(Array.prototype.slice.call(arguments, 1));
}

ES6 (ECMAScript 6 / ES2015 / ESNext )
=====================================
1. let
2. const
3. Array destructuring
4. Rest operator (Array)
5. Spread operator (Array)
6. Object destructuring
7. Rest operator (Object)
8. Spread operator (Object)
9. default arguments
10. arrow functions
11. object construction enhancements
12. template strings
13. classes
14. Symbol


function add(...args){
    function parseArg(n){
        if (typeof n === 'function') return parseArg(n());
        if (Array.isArray(n)) return add(...n);
        return isNaN(n) ? 0 : parseInt(n)
    }
    return args.length <= 1 ? parseArg(args[0]) : parseArg(args[0]) + add(args.slice(1));
}

Create a html page ('clickTracker.html')
The page should have a button ('Track')
Everytime the button is clicked, the page should display the number of times the button was clicked


Electron

main process
    created when the application is instantiated
    only one main process per application
    handle application life cycle events
    native apis are available only to the main process
    creates one or more renderer processes (BrowserWindow)

renderer process
    any number of renderer processes in an application
    Offers user interaction (html pages)

Communication between Main process and renderer process is achieved using Named Pipes
IPC - Inter Process Communication
ipcMain, ipcRenderer


Node.js
    JavaScript Runtime
    Execute JS applications
    Less Memory Footprint
    Single Threaded Event Loop
        Async I/O

    Async Operation
        Initiate it and don't wait for its completion
            1. callbacks
            2. events (Event Emitter)
            3. promises
            4. async await
            5. generators
            6. observables

    Sync Operation
        Wait for the operation to complete


package.json
    metadata information about the application
        name
        author
        description
        keywords
        repository
        private
        version
        license
        scripts
            commands to perform development activities on the code base

        dependencies
            document the third party libraries used in our application

        devDependencies
            third party libraries used for 'development' activities of the application

npm
yarn

To create a package.json file
    npm init


CommonJS module system
    Everything defined in a js file is considered PRIVATE
    public entities have to be assiged to 'module.exports' 
        (default value of 'module.exports' is an empty object)
    use 'require' function to import entities from other files


React
    Component -> object that encapsulates (Data, Presentation, UI Behavior)
    Application = composition of components
    Virtual DOM

React - Library ( UI concerns )

Angular
    Component
    Directive
    Pipe
    Services
    Modules

    APIs
        Router
        Http

react.js
    - Virtual DOM
    React
react-dom.js
    VDOM -> Actual DOM
    ReactDOM


//Actual DOM
/*
var header = document.createElement('h1');
header.setAttribute('id', 'header-1')
header.innerText = 'Welcome to React.js!';
document.body.appendChild(header)
*/

//Virutal DOM
var header = React.createElement('h1', { 'id' : 'header-1'}, 'Welcome to React.js!')
ReactDOM.render(header, document.getElementById('root'))
